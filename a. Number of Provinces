There are n cities. Some of them are connected, while some are not. If city a is connected directly with city b, and city b is connected directly with city c, then city a is connected indirectly with city c.

A province is a group of directly or indirectly connected cities and no other cities outside of the group.

You are given an n x n matrix isConnected where isConnected[i][j] = 1 if the ith city and the jth city are directly connected, and isConnected[i][j] = 0 otherwise.

Return the total number of provinces.


class Solution {
private:
    void dfs(int node, vector<int> adjl[], vector<int> &vis) {
        for(auto it : adjl[node]) {
            if(!vis[it]) {
                vis[it] = 1;
                dfs(it, adjl, vis);
            }
        }
    }
public:
    int findCircleNum(vector<vector<int>>& isConnected) {
        int v = isConnected.size();

        // making adjl and filling them up with matrix ke elements

        vector<int> adjl[v];
        for(int i = 0; i < v; i++) {
            for(int j = 0; j < v; j++) {
                if(isConnected[i][j] == 1 && i != j) {
                    adjl[i].push_back(j);
                    adjl[j].push_back(i);
                }
            }
        }

        // cheching if the element is vivited or no, if no, we call dfs
        int count = 0;
        vector<int> vis(v, 0);
        for(int i = 0; i < v; i++) {
            if(!vis[i]) {
                count += 1;
                dfs(i, adjl, vis);
            }
        }
        return count;
    }
};
