Very first thing comes in undirected graph for finding shortest path is bfs. Bfs ensures that a node at distance k will be visited first then a node at k+1 distance.

Queue data structure: follows FIFO, and will always contain the starting.
Visited array: an array initialized to 0

Algorithm:
1. Use a visited vector to mark all the vertices as not visited(0).
2. Initially mark first vertex as visited(true). / we start with a “starting” node, mark it as visited. 
3. Create a queue and push it into the queue data structure.
4. While queue is not empty:
   I. Keep adding front element in output list and popping it from queue and put it in the solution vector, as we are traversing this node.
   II. Traverse over all the connected components/adjacent nodes of front element.
   III. If they aren't visited, mark them visited and push to the queue.
   IV. The list of adjacent neighbors of the node can be accessed from the adjacency list.
5. Repeat steps 2, 3 and 4 until the queue becomes empty, and this way you can easily traverse all the nodes in the graph.
6. Return the output list.
